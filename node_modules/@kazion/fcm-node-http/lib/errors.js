"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleAxiosError = exports.ErrorCode = void 0;
const axios_1 = require("axios");
exports.ErrorCode = {
    UNSPECIFIED_ERROR: "No more information is available about this error.",
    INVALID_ARGUMENT: "The request contains a bad argument. check the error message for details. https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode",
    UNREGISTERED: `The registration token is not valid for the target project. 
- This can happen if the token is: 
1) Invalid. 
2) Associated with a different project. 
3) Not registered with FCM. 
4) Unregistered from FCM. 
5) Deleted from the device.\n`,
    SENDER_ID_MISMATCH: `The registration token is not valid for the target project. 
- This can happen if the token is: 
1) Invalid. 
2) Associated with a different project. 
3) Not registered with FCM. 
4) Unregistered from FCM. 
5) Deleted from the device.\n`,
    QUOTA_EXCEEDED: "The project's quota for messages has been exceeded. See https://firebase.google.com/docs/cloud-messaging/quotas for details.",
    UNAVAILABLE: "The FCM service is unavailable. See https://firebase.google.com/docs/cloud-messaging/errors for details.",
    INTERNAL: "An internal error has occurred. Retry the request.",
    THIRD_PARTY_AUTH_ERROR: "The authentication used to send the message is invalid or has expired. See https://firebase.google.com/docs/cloud-messaging/auth-server for details on generating a new token.",
};
class FCMError extends Error {
    constructor(message) {
        super(message);
        this.name = "FCMError";
    }
}
const handleAxiosError = (error) => {
    if ((0, axios_1.isAxiosError)(error)) {
        if (error.response?.data?.error?.details?.length) {
            const details = error.response.data.error.details;
            const code = details[0]?.errorCode;
            if (code in exports.ErrorCode) {
                throw new FCMError(exports.ErrorCode[code]);
            }
            else {
                throw new FCMError(exports.ErrorCode.UNSPECIFIED_ERROR);
            }
        }
    }
    else {
        throw new FCMError(exports.ErrorCode.UNSPECIFIED_ERROR);
    }
};
exports.handleAxiosError = handleAxiosError;
