"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FCM = void 0;
const fs_1 = require("fs");
const axios_1 = require("axios");
const google_auth_library_1 = require("google-auth-library");
const errors_1 = require("./errors");
class FCM {
    auth;
    client = null;
    url;
    constructor(path_to_creds) {
        if (!(0, fs_1.existsSync)(path_to_creds)) {
            throw new Error("Enter a valid path to your private key file");
        }
        const creds = JSON.parse((0, fs_1.readFileSync)(path_to_creds, "utf8"));
        if (!creds.project_id)
            throw new Error("No project_id found in  private key file");
        this.auth = new google_auth_library_1.GoogleAuth({
            keyFile: path_to_creds,
            clientOptions: {
                forceRefreshOnFailure: true,
            },
            scopes: [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase.messaging",
            ],
        });
        this.url = `https://fcm.googleapis.com/v1/projects/${creds.project_id}/messages:send`;
    }
    async getAccessToken() {
        this.client = await this.auth.getClient();
        const { token } = await this.client.getAccessToken();
        return token;
    }
    async send(registrationToken, message) {
        try {
            const token = await this.getAccessToken();
            const response = await (0, axios_1.default)(this.url, {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${token}`,
                },
                data: {
                    message: {
                        token: registrationToken,
                        ...message,
                    },
                },
            });
            return response.data;
        }
        catch (error) {
            (0, errors_1.handleAxiosError)(error);
            throw error;
        }
    }
    async sendAll(registrationTokens, message) {
        try {
            const promises = registrationTokens.map((registrationToken) => {
                return this.send(registrationToken, message);
            });
            const response = await Promise.all(promises);
            return response;
        }
        catch (error) {
            (0, errors_1.handleAxiosError)(error);
        }
    }
    async sendToTopic(topic, message) {
        try {
            const token = await this.getAccessToken();
            const response = await (0, axios_1.default)(this.url, {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${token}`,
                },
                data: {
                    message: {
                        topic,
                        ...message,
                    },
                },
            });
            return response.data;
        }
        catch (error) {
            (0, errors_1.handleAxiosError)(error);
        }
    }
}
exports.FCM = FCM;
